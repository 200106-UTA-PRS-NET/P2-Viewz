# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
pool: Default

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
jobs:
- job: DeployMaster
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'publish'
      publishWebProjects: false
      arguments: '--configuration $(buildConfiguration)'
      zipAfterPublish: true
      projects: '**/Viewz*.csproj'
    displayName: 'DotNet publish api and app + zip'
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Azure subscription 1(54320e88-cfc4-4aec-90cf-a5c188c75dd0)'
      appType: 'webAppLinux'
      appName: 'viewz'
      package: '$(System.DefaultWorkingDirectory)/ViewzApp/**/*.zip'
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Azure subscription 1(54320e88-cfc4-4aec-90cf-a5c188c75dd0)'
      appType: 'webAppLinux'
      appName: 'viewzapi'
      package: '$(System.DefaultWorkingDirectory)/ViewzApi/**/*.zip'

- job: DeployAPICanary
  condition: and(always(), eq(variables['Build.SourceBranch'], 'refs/heads/api-service'), ne(variables['Build.Reason'], 'PullRequest'))
  steps:
  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'publish'
      publishWebProjects: false
      arguments: '--configuration $(buildConfiguration)'
      zipAfterPublish: true
      projects: '**/ViewzApi.csproj'
    displayName: 'DotNet publish api and app + zip'
  - task: AzureWebApp@1
    inputs:
      azureSubscription: 'Azure subscription 1(54320e88-cfc4-4aec-90cf-a5c188c75dd0)'
      appType: 'webAppLinux'
      appName: 'viewzapicanary'
      package: '$(System.DefaultWorkingDirectory)/ViewzApi/**/*.zip'

- job: PullRequestsAndNonMasterBuilds
  condition: and(always(), or(ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'PullRequest')))
  steps:
  - script: dotnet build --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
  - script: dotnet test
      --configuration $(buildConfiguration)
      --logger trx
      --no-build
      --results-directory $(Build.ArtifactStagingDirectory)/test/
      /p:CollectCoverage=true
      /p:CoverletOutputFormat=\"cobertura,opencover\"
      /p:CoverletOutput="$(Build.ArtifactStagingDirectory)/coverage/"
    displayName: 'Dotnet test and coverage'
  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
      searchFolder: '$(Build.ArtifactStagingDirectory)/test/'
  - task: PublishCodeCoverageResults@1
    condition: always()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.ArtifactStagingDirectory)/coverage/**/*cobertura.xml'

- job: StaticAnalysis
  condition: and(always(), or(ne(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'PullRequest')))
  pool:
    vmImage: 'windows-latest'
  steps:
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'jdf-revature'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'jdf.viewz'
      cliSources: '.'
      extraProperties: |
          sonar.exclusions=**/wwwroot/lib/**/*,**/DataAccess/Models/**/*
  - task: SonarCloudAnalyze@1
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'